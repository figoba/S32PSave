//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.42000 版自动生成。
// 
#pragma warning disable 1591

namespace S32PSave.MESLabel {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="BasicHttpBinding_IMESDataServices", Namespace="http://tempuri.org/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SqlParam[]))]
    public partial class MESDataServices : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetDataFromSFCOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertDataToSFCOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTiptopBOMInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCheckEquipmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecEquipmentUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecEquipmentOAUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEncrytStringOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertCADVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPLMECNOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetECNBomOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecECNBomUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecMOProduceItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecEBUMOProduceItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetMoidAlterOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCheckAssysDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecTestResultProcOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckEquLifeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSystemAddressOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSettingOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSFCFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecMaterialIssueOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSFCStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHWOutQtyOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckSfcMoPNOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSFCNewFSNOperationCompleted;
        
        private System.Threading.SendOrPostCallback PrintSFCFSNLabelOperationCompleted;
        
        private System.Threading.SendOrPostCallback PrintSFCFSNLabelNOperationCompleted;
        
        private System.Threading.SendOrPostCallback PrintSFCFSNPocketOperationCompleted;
        
        private System.Threading.SendOrPostCallback RePrintSFCFSNPocketOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckUserAuthorityOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSFCFChildTPartOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSFCFChildMoidOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckMoUNTreatedNGOperationCompleted;
        
        private System.Threading.SendOrPostCallback ServiceInterfaceOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public MESDataServices() {
            this.Url = global::S32PSave.Properties.Settings.Default.S32PSave_MESLabel_MESDataServices;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetDataFromSFCCompletedEventHandler GetDataFromSFCCompleted;
        
        /// <remarks/>
        public event InsertDataToSFCCompletedEventHandler InsertDataToSFCCompleted;
        
        /// <remarks/>
        public event GetTiptopBOMInfoCompletedEventHandler GetTiptopBOMInfoCompleted;
        
        /// <remarks/>
        public event GetCheckEquipmentCompletedEventHandler GetCheckEquipmentCompleted;
        
        /// <remarks/>
        public event ExecEquipmentUpdateCompletedEventHandler ExecEquipmentUpdateCompleted;
        
        /// <remarks/>
        public event ExecEquipmentOAUpdateCompletedEventHandler ExecEquipmentOAUpdateCompleted;
        
        /// <remarks/>
        public event GetEncrytStringCompletedEventHandler GetEncrytStringCompleted;
        
        /// <remarks/>
        public event InsertCADVersionCompletedEventHandler InsertCADVersionCompleted;
        
        /// <remarks/>
        public event GetPLMECNCompletedEventHandler GetPLMECNCompleted;
        
        /// <remarks/>
        public event GetECNBomCompletedEventHandler GetECNBomCompleted;
        
        /// <remarks/>
        public event ExecECNBomUpdateCompletedEventHandler ExecECNBomUpdateCompleted;
        
        /// <remarks/>
        public event ExecMOProduceItemCompletedEventHandler ExecMOProduceItemCompleted;
        
        /// <remarks/>
        public event ExecEBUMOProduceItemCompletedEventHandler ExecEBUMOProduceItemCompleted;
        
        /// <remarks/>
        public event SetMoidAlterCompletedEventHandler SetMoidAlterCompleted;
        
        /// <remarks/>
        public event GetCheckAssysDataCompletedEventHandler GetCheckAssysDataCompleted;
        
        /// <remarks/>
        public event ExecTestResultProcCompletedEventHandler ExecTestResultProcCompleted;
        
        /// <remarks/>
        public event CheckEquLifeCompletedEventHandler CheckEquLifeCompleted;
        
        /// <remarks/>
        public event GetSystemAddressCompletedEventHandler GetSystemAddressCompleted;
        
        /// <remarks/>
        public event GetSettingCompletedEventHandler GetSettingCompleted;
        
        /// <remarks/>
        public event GetSFCFileCompletedEventHandler GetSFCFileCompleted;
        
        /// <remarks/>
        public event ExecMaterialIssueCompletedEventHandler ExecMaterialIssueCompleted;
        
        /// <remarks/>
        public event GetSFCStatusCompletedEventHandler GetSFCStatusCompleted;
        
        /// <remarks/>
        public event GetHWOutQtyCompletedEventHandler GetHWOutQtyCompleted;
        
        /// <remarks/>
        public event CheckSfcMoPNCompletedEventHandler CheckSfcMoPNCompleted;
        
        /// <remarks/>
        public event GetSFCNewFSNCompletedEventHandler GetSFCNewFSNCompleted;
        
        /// <remarks/>
        public event PrintSFCFSNLabelCompletedEventHandler PrintSFCFSNLabelCompleted;
        
        /// <remarks/>
        public event PrintSFCFSNLabelNCompletedEventHandler PrintSFCFSNLabelNCompleted;
        
        /// <remarks/>
        public event PrintSFCFSNPocketCompletedEventHandler PrintSFCFSNPocketCompleted;
        
        /// <remarks/>
        public event RePrintSFCFSNPocketCompletedEventHandler RePrintSFCFSNPocketCompleted;
        
        /// <remarks/>
        public event CheckUserAuthorityCompletedEventHandler CheckUserAuthorityCompleted;
        
        /// <remarks/>
        public event GetSFCFChildTPartCompletedEventHandler GetSFCFChildTPartCompleted;
        
        /// <remarks/>
        public event GetSFCFChildMoidCompletedEventHandler GetSFCFChildMoidCompleted;
        
        /// <remarks/>
        public event CheckMoUNTreatedNGCompletedEventHandler CheckMoUNTreatedNGCompleted;
        
        /// <remarks/>
        public event ServiceInterfaceCompletedEventHandler ServiceInterfaceCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMESDataServices/GetDataFromSFC", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Data.DataTable GetDataFromSFC([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string spName, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/DAL")] SqlParam[] parameters) {
            object[] results = this.Invoke("GetDataFromSFC", new object[] {
                        spName,
                        parameters});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetDataFromSFCAsync(string spName, SqlParam[] parameters) {
            this.GetDataFromSFCAsync(spName, parameters, null);
        }
        
        /// <remarks/>
        public void GetDataFromSFCAsync(string spName, SqlParam[] parameters, object userState) {
            if ((this.GetDataFromSFCOperationCompleted == null)) {
                this.GetDataFromSFCOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataFromSFCOperationCompleted);
            }
            this.InvokeAsync("GetDataFromSFC", new object[] {
                        spName,
                        parameters}, this.GetDataFromSFCOperationCompleted, userState);
        }
        
        private void OnGetDataFromSFCOperationCompleted(object arg) {
            if ((this.GetDataFromSFCCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataFromSFCCompleted(this, new GetDataFromSFCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMESDataServices/InsertDataToSFC", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InsertDataToSFC([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string spName, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/DAL")] SqlParam[] parameters, out bool InsertDataToSFCResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool InsertDataToSFCResultSpecified) {
            object[] results = this.Invoke("InsertDataToSFC", new object[] {
                        spName,
                        parameters});
            InsertDataToSFCResult = ((bool)(results[0]));
            InsertDataToSFCResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void InsertDataToSFCAsync(string spName, SqlParam[] parameters) {
            this.InsertDataToSFCAsync(spName, parameters, null);
        }
        
        /// <remarks/>
        public void InsertDataToSFCAsync(string spName, SqlParam[] parameters, object userState) {
            if ((this.InsertDataToSFCOperationCompleted == null)) {
                this.InsertDataToSFCOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertDataToSFCOperationCompleted);
            }
            this.InvokeAsync("InsertDataToSFC", new object[] {
                        spName,
                        parameters}, this.InsertDataToSFCOperationCompleted, userState);
        }
        
        private void OnInsertDataToSFCOperationCompleted(object arg) {
            if ((this.InsertDataToSFCCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertDataToSFCCompleted(this, new InsertDataToSFCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMESDataServices/GetTiptopBOMInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Data.DataTable GetTiptopBOMInfo([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string FactoryId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string ProfitCenter, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string PartNO, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string rtValue, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string rtMsg) {
            object[] results = this.Invoke("GetTiptopBOMInfo", new object[] {
                        FactoryId,
                        ProfitCenter,
                        PartNO});
            rtValue = ((string)(results[1]));
            rtMsg = ((string)(results[2]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetTiptopBOMInfoAsync(string FactoryId, string ProfitCenter, string PartNO) {
            this.GetTiptopBOMInfoAsync(FactoryId, ProfitCenter, PartNO, null);
        }
        
        /// <remarks/>
        public void GetTiptopBOMInfoAsync(string FactoryId, string ProfitCenter, string PartNO, object userState) {
            if ((this.GetTiptopBOMInfoOperationCompleted == null)) {
                this.GetTiptopBOMInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTiptopBOMInfoOperationCompleted);
            }
            this.InvokeAsync("GetTiptopBOMInfo", new object[] {
                        FactoryId,
                        ProfitCenter,
                        PartNO}, this.GetTiptopBOMInfoOperationCompleted, userState);
        }
        
        private void OnGetTiptopBOMInfoOperationCompleted(object arg) {
            if ((this.GetTiptopBOMInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTiptopBOMInfoCompleted(this, new GetTiptopBOMInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMESDataServices/GetCheckEquipment", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetCheckEquipment([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string FactoryId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string profitcenter, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string EquipmentNO, out bool GetCheckEquipmentResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool GetCheckEquipmentResultSpecified, out int Quantity, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool QuantitySpecified, out int ValidQuantity, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool ValidQuantitySpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string rtValue, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string rtMsg) {
            object[] results = this.Invoke("GetCheckEquipment", new object[] {
                        FactoryId,
                        profitcenter,
                        EquipmentNO});
            GetCheckEquipmentResult = ((bool)(results[0]));
            GetCheckEquipmentResultSpecified = ((bool)(results[1]));
            Quantity = ((int)(results[2]));
            QuantitySpecified = ((bool)(results[3]));
            ValidQuantity = ((int)(results[4]));
            ValidQuantitySpecified = ((bool)(results[5]));
            rtValue = ((string)(results[6]));
            rtMsg = ((string)(results[7]));
        }
        
        /// <remarks/>
        public void GetCheckEquipmentAsync(string FactoryId, string profitcenter, string EquipmentNO) {
            this.GetCheckEquipmentAsync(FactoryId, profitcenter, EquipmentNO, null);
        }
        
        /// <remarks/>
        public void GetCheckEquipmentAsync(string FactoryId, string profitcenter, string EquipmentNO, object userState) {
            if ((this.GetCheckEquipmentOperationCompleted == null)) {
                this.GetCheckEquipmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCheckEquipmentOperationCompleted);
            }
            this.InvokeAsync("GetCheckEquipment", new object[] {
                        FactoryId,
                        profitcenter,
                        EquipmentNO}, this.GetCheckEquipmentOperationCompleted, userState);
        }
        
        private void OnGetCheckEquipmentOperationCompleted(object arg) {
            if ((this.GetCheckEquipmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCheckEquipmentCompleted(this, new GetCheckEquipmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMESDataServices/ExecEquipmentUpdate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ExecEquipmentUpdate([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string FactoryId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string profitcenter, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string EquipmentNO, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string ProudctId, out bool ExecEquipmentUpdateResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool ExecEquipmentUpdateResultSpecified, out int Quantity, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool QuantitySpecified, out int ValidQuantity, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool ValidQuantitySpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string rtValue, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string rtMsg) {
            object[] results = this.Invoke("ExecEquipmentUpdate", new object[] {
                        FactoryId,
                        profitcenter,
                        EquipmentNO,
                        ProudctId});
            ExecEquipmentUpdateResult = ((bool)(results[0]));
            ExecEquipmentUpdateResultSpecified = ((bool)(results[1]));
            Quantity = ((int)(results[2]));
            QuantitySpecified = ((bool)(results[3]));
            ValidQuantity = ((int)(results[4]));
            ValidQuantitySpecified = ((bool)(results[5]));
            rtValue = ((string)(results[6]));
            rtMsg = ((string)(results[7]));
        }
        
        /// <remarks/>
        public void ExecEquipmentUpdateAsync(string FactoryId, string profitcenter, string EquipmentNO, string ProudctId) {
            this.ExecEquipmentUpdateAsync(FactoryId, profitcenter, EquipmentNO, ProudctId, null);
        }
        
        /// <remarks/>
        public void ExecEquipmentUpdateAsync(string FactoryId, string profitcenter, string EquipmentNO, string ProudctId, object userState) {
            if ((this.ExecEquipmentUpdateOperationCompleted == null)) {
                this.ExecEquipmentUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecEquipmentUpdateOperationCompleted);
            }
            this.InvokeAsync("ExecEquipmentUpdate", new object[] {
                        FactoryId,
                        profitcenter,
                        EquipmentNO,
                        ProudctId}, this.ExecEquipmentUpdateOperationCompleted, userState);
        }
        
        private void OnExecEquipmentUpdateOperationCompleted(object arg) {
            if ((this.ExecEquipmentUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecEquipmentUpdateCompleted(this, new ExecEquipmentUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMESDataServices/ExecEquipmentOAUpdate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ExecEquipmentOAUpdate([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string FactoryId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string profitcenter, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string EquipmentNO, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string OAUrl, out bool ExecEquipmentOAUpdateResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool ExecEquipmentOAUpdateResultSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string rtValue, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string rtMsg) {
            object[] results = this.Invoke("ExecEquipmentOAUpdate", new object[] {
                        FactoryId,
                        profitcenter,
                        EquipmentNO,
                        OAUrl});
            ExecEquipmentOAUpdateResult = ((bool)(results[0]));
            ExecEquipmentOAUpdateResultSpecified = ((bool)(results[1]));
            rtValue = ((string)(results[2]));
            rtMsg = ((string)(results[3]));
        }
        
        /// <remarks/>
        public void ExecEquipmentOAUpdateAsync(string FactoryId, string profitcenter, string EquipmentNO, string OAUrl) {
            this.ExecEquipmentOAUpdateAsync(FactoryId, profitcenter, EquipmentNO, OAUrl, null);
        }
        
        /// <remarks/>
        public void ExecEquipmentOAUpdateAsync(string FactoryId, string profitcenter, string EquipmentNO, string OAUrl, object userState) {
            if ((this.ExecEquipmentOAUpdateOperationCompleted == null)) {
                this.ExecEquipmentOAUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecEquipmentOAUpdateOperationCompleted);
            }
            this.InvokeAsync("ExecEquipmentOAUpdate", new object[] {
                        FactoryId,
                        profitcenter,
                        EquipmentNO,
                        OAUrl}, this.ExecEquipmentOAUpdateOperationCompleted, userState);
        }
        
        private void OnExecEquipmentOAUpdateOperationCompleted(object arg) {
            if ((this.ExecEquipmentOAUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecEquipmentOAUpdateCompleted(this, new ExecEquipmentOAUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMESDataServices/GetEncrytString", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetEncrytString([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string strText) {
            object[] results = this.Invoke("GetEncrytString", new object[] {
                        strText});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetEncrytStringAsync(string strText) {
            this.GetEncrytStringAsync(strText, null);
        }
        
        /// <remarks/>
        public void GetEncrytStringAsync(string strText, object userState) {
            if ((this.GetEncrytStringOperationCompleted == null)) {
                this.GetEncrytStringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEncrytStringOperationCompleted);
            }
            this.InvokeAsync("GetEncrytString", new object[] {
                        strText}, this.GetEncrytStringOperationCompleted, userState);
        }
        
        private void OnGetEncrytStringOperationCompleted(object arg) {
            if ((this.GetEncrytStringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEncrytStringCompleted(this, new GetEncrytStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMESDataServices/InsertCADVersion", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InsertCADVersion([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string FactoryId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string ProfitCenter, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string UserId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string ComputerName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string FileName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string Description, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string PartNO, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string Version, out bool InsertCADVersionResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool InsertCADVersionResultSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string rtValue, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string rtMsg) {
            object[] results = this.Invoke("InsertCADVersion", new object[] {
                        FactoryId,
                        ProfitCenter,
                        UserId,
                        ComputerName,
                        FileName,
                        Description,
                        PartNO,
                        Version});
            InsertCADVersionResult = ((bool)(results[0]));
            InsertCADVersionResultSpecified = ((bool)(results[1]));
            rtValue = ((string)(results[2]));
            rtMsg = ((string)(results[3]));
        }
        
        /// <remarks/>
        public void InsertCADVersionAsync(string FactoryId, string ProfitCenter, string UserId, string ComputerName, string FileName, string Description, string PartNO, string Version) {
            this.InsertCADVersionAsync(FactoryId, ProfitCenter, UserId, ComputerName, FileName, Description, PartNO, Version, null);
        }
        
        /// <remarks/>
        public void InsertCADVersionAsync(string FactoryId, string ProfitCenter, string UserId, string ComputerName, string FileName, string Description, string PartNO, string Version, object userState) {
            if ((this.InsertCADVersionOperationCompleted == null)) {
                this.InsertCADVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertCADVersionOperationCompleted);
            }
            this.InvokeAsync("InsertCADVersion", new object[] {
                        FactoryId,
                        ProfitCenter,
                        UserId,
                        ComputerName,
                        FileName,
                        Description,
                        PartNO,
                        Version}, this.InsertCADVersionOperationCompleted, userState);
        }
        
        private void OnInsertCADVersionOperationCompleted(object arg) {
            if ((this.InsertCADVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertCADVersionCompleted(this, new InsertCADVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMESDataServices/GetPLMECN", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Data.DataTable GetPLMECN([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string FactoryId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string Profitcenter, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string ECNID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string rtValue, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string rtMsg) {
            object[] results = this.Invoke("GetPLMECN", new object[] {
                        FactoryId,
                        Profitcenter,
                        ECNID});
            rtValue = ((string)(results[1]));
            rtMsg = ((string)(results[2]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetPLMECNAsync(string FactoryId, string Profitcenter, string ECNID) {
            this.GetPLMECNAsync(FactoryId, Profitcenter, ECNID, null);
        }
        
        /// <remarks/>
        public void GetPLMECNAsync(string FactoryId, string Profitcenter, string ECNID, object userState) {
            if ((this.GetPLMECNOperationCompleted == null)) {
                this.GetPLMECNOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPLMECNOperationCompleted);
            }
            this.InvokeAsync("GetPLMECN", new object[] {
                        FactoryId,
                        Profitcenter,
                        ECNID}, this.GetPLMECNOperationCompleted, userState);
        }
        
        private void OnGetPLMECNOperationCompleted(object arg) {
            if ((this.GetPLMECNCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPLMECNCompleted(this, new GetPLMECNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMESDataServices/GetECNBom", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Data.DataTable GetECNBom([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string FactoryId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string profitcenter, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string PartNO, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string rtValue, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string rtMsg) {
            object[] results = this.Invoke("GetECNBom", new object[] {
                        FactoryId,
                        profitcenter,
                        PartNO});
            rtValue = ((string)(results[1]));
            rtMsg = ((string)(results[2]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetECNBomAsync(string FactoryId, string profitcenter, string PartNO) {
            this.GetECNBomAsync(FactoryId, profitcenter, PartNO, null);
        }
        
        /// <remarks/>
        public void GetECNBomAsync(string FactoryId, string profitcenter, string PartNO, object userState) {
            if ((this.GetECNBomOperationCompleted == null)) {
                this.GetECNBomOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetECNBomOperationCompleted);
            }
            this.InvokeAsync("GetECNBom", new object[] {
                        FactoryId,
                        profitcenter,
                        PartNO}, this.GetECNBomOperationCompleted, userState);
        }
        
        private void OnGetECNBomOperationCompleted(object arg) {
            if ((this.GetECNBomCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetECNBomCompleted(this, new GetECNBomCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMESDataServices/ExecECNBomUpdate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ExecECNBomUpdate([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string FactoryId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string profitcenter, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Data.DataTable dtBom, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string ECNID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string PARTNUMBER, out bool ExecECNBomUpdateResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool ExecECNBomUpdateResultSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string rtValue, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string rtMsg) {
            object[] results = this.Invoke("ExecECNBomUpdate", new object[] {
                        FactoryId,
                        profitcenter,
                        dtBom,
                        ECNID,
                        PARTNUMBER});
            ExecECNBomUpdateResult = ((bool)(results[0]));
            ExecECNBomUpdateResultSpecified = ((bool)(results[1]));
            rtValue = ((string)(results[2]));
            rtMsg = ((string)(results[3]));
        }
        
        /// <remarks/>
        public void ExecECNBomUpdateAsync(string FactoryId, string profitcenter, System.Data.DataTable dtBom, string ECNID, string PARTNUMBER) {
            this.ExecECNBomUpdateAsync(FactoryId, profitcenter, dtBom, ECNID, PARTNUMBER, null);
        }
        
        /// <remarks/>
        public void ExecECNBomUpdateAsync(string FactoryId, string profitcenter, System.Data.DataTable dtBom, string ECNID, string PARTNUMBER, object userState) {
            if ((this.ExecECNBomUpdateOperationCompleted == null)) {
                this.ExecECNBomUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecECNBomUpdateOperationCompleted);
            }
            this.InvokeAsync("ExecECNBomUpdate", new object[] {
                        FactoryId,
                        profitcenter,
                        dtBom,
                        ECNID,
                        PARTNUMBER}, this.ExecECNBomUpdateOperationCompleted, userState);
        }
        
        private void OnExecECNBomUpdateOperationCompleted(object arg) {
            if ((this.ExecECNBomUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecECNBomUpdateCompleted(this, new ExecECNBomUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMESDataServices/ExecMOProduceItem", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ExecMOProduceItem([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string FactoryId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string profitcenter, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string UserId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string MOID, out bool ExecMOProduceItemResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool ExecMOProduceItemResultSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string outScanQuantity, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string rtValue, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string rtMsg) {
            object[] results = this.Invoke("ExecMOProduceItem", new object[] {
                        FactoryId,
                        profitcenter,
                        UserId,
                        MOID});
            ExecMOProduceItemResult = ((bool)(results[0]));
            ExecMOProduceItemResultSpecified = ((bool)(results[1]));
            outScanQuantity = ((string)(results[2]));
            rtValue = ((string)(results[3]));
            rtMsg = ((string)(results[4]));
        }
        
        /// <remarks/>
        public void ExecMOProduceItemAsync(string FactoryId, string profitcenter, string UserId, string MOID) {
            this.ExecMOProduceItemAsync(FactoryId, profitcenter, UserId, MOID, null);
        }
        
        /// <remarks/>
        public void ExecMOProduceItemAsync(string FactoryId, string profitcenter, string UserId, string MOID, object userState) {
            if ((this.ExecMOProduceItemOperationCompleted == null)) {
                this.ExecMOProduceItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecMOProduceItemOperationCompleted);
            }
            this.InvokeAsync("ExecMOProduceItem", new object[] {
                        FactoryId,
                        profitcenter,
                        UserId,
                        MOID}, this.ExecMOProduceItemOperationCompleted, userState);
        }
        
        private void OnExecMOProduceItemOperationCompleted(object arg) {
            if ((this.ExecMOProduceItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecMOProduceItemCompleted(this, new ExecMOProduceItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMESDataServices/ExecEBUMOProduceItem", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ExecEBUMOProduceItem([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string FactoryId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string profitcenter, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string UserId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string MOID, out bool ExecEBUMOProduceItemResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool ExecEBUMOProduceItemResultSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string outScanQuantity, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string rtValue, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string rtMsg) {
            object[] results = this.Invoke("ExecEBUMOProduceItem", new object[] {
                        FactoryId,
                        profitcenter,
                        UserId,
                        MOID});
            ExecEBUMOProduceItemResult = ((bool)(results[0]));
            ExecEBUMOProduceItemResultSpecified = ((bool)(results[1]));
            outScanQuantity = ((string)(results[2]));
            rtValue = ((string)(results[3]));
            rtMsg = ((string)(results[4]));
        }
        
        /// <remarks/>
        public void ExecEBUMOProduceItemAsync(string FactoryId, string profitcenter, string UserId, string MOID) {
            this.ExecEBUMOProduceItemAsync(FactoryId, profitcenter, UserId, MOID, null);
        }
        
        /// <remarks/>
        public void ExecEBUMOProduceItemAsync(string FactoryId, string profitcenter, string UserId, string MOID, object userState) {
            if ((this.ExecEBUMOProduceItemOperationCompleted == null)) {
                this.ExecEBUMOProduceItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecEBUMOProduceItemOperationCompleted);
            }
            this.InvokeAsync("ExecEBUMOProduceItem", new object[] {
                        FactoryId,
                        profitcenter,
                        UserId,
                        MOID}, this.ExecEBUMOProduceItemOperationCompleted, userState);
        }
        
        private void OnExecEBUMOProduceItemOperationCompleted(object arg) {
            if ((this.ExecEBUMOProduceItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecEBUMOProduceItemCompleted(this, new ExecEBUMOProduceItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMESDataServices/SetMoidAlter", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string SetMoidAlter([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string FactoryId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string Profitcenter, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string Moid, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string PartID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string UserName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string ReMark, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string rtValue, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string rtMsg) {
            object[] results = this.Invoke("SetMoidAlter", new object[] {
                        FactoryId,
                        Profitcenter,
                        Moid,
                        PartID,
                        UserName,
                        ReMark});
            rtValue = ((string)(results[1]));
            rtMsg = ((string)(results[2]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SetMoidAlterAsync(string FactoryId, string Profitcenter, string Moid, string PartID, string UserName, string ReMark) {
            this.SetMoidAlterAsync(FactoryId, Profitcenter, Moid, PartID, UserName, ReMark, null);
        }
        
        /// <remarks/>
        public void SetMoidAlterAsync(string FactoryId, string Profitcenter, string Moid, string PartID, string UserName, string ReMark, object userState) {
            if ((this.SetMoidAlterOperationCompleted == null)) {
                this.SetMoidAlterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetMoidAlterOperationCompleted);
            }
            this.InvokeAsync("SetMoidAlter", new object[] {
                        FactoryId,
                        Profitcenter,
                        Moid,
                        PartID,
                        UserName,
                        ReMark}, this.SetMoidAlterOperationCompleted, userState);
        }
        
        private void OnSetMoidAlterOperationCompleted(object arg) {
            if ((this.SetMoidAlterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetMoidAlterCompleted(this, new SetMoidAlterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMESDataServices/GetCheckAssysData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetCheckAssysData([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string BarCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string StationId, out bool GetCheckAssysDataResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool GetCheckAssysDataResultSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string rtValue, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string rtMsg) {
            object[] results = this.Invoke("GetCheckAssysData", new object[] {
                        BarCode,
                        StationId});
            GetCheckAssysDataResult = ((bool)(results[0]));
            GetCheckAssysDataResultSpecified = ((bool)(results[1]));
            rtValue = ((string)(results[2]));
            rtMsg = ((string)(results[3]));
        }
        
        /// <remarks/>
        public void GetCheckAssysDataAsync(string BarCode, string StationId) {
            this.GetCheckAssysDataAsync(BarCode, StationId, null);
        }
        
        /// <remarks/>
        public void GetCheckAssysDataAsync(string BarCode, string StationId, object userState) {
            if ((this.GetCheckAssysDataOperationCompleted == null)) {
                this.GetCheckAssysDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCheckAssysDataOperationCompleted);
            }
            this.InvokeAsync("GetCheckAssysData", new object[] {
                        BarCode,
                        StationId}, this.GetCheckAssysDataOperationCompleted, userState);
        }
        
        private void OnGetCheckAssysDataOperationCompleted(object arg) {
            if ((this.GetCheckAssysDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCheckAssysDataCompleted(this, new GetCheckAssysDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMESDataServices/ExecTestResultProc", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ExecTestResultProc([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string BarCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string StationId, out bool ExecTestResultProcResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool ExecTestResultProcResultSpecified) {
            object[] results = this.Invoke("ExecTestResultProc", new object[] {
                        BarCode,
                        StationId});
            ExecTestResultProcResult = ((bool)(results[0]));
            ExecTestResultProcResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void ExecTestResultProcAsync(string BarCode, string StationId) {
            this.ExecTestResultProcAsync(BarCode, StationId, null);
        }
        
        /// <remarks/>
        public void ExecTestResultProcAsync(string BarCode, string StationId, object userState) {
            if ((this.ExecTestResultProcOperationCompleted == null)) {
                this.ExecTestResultProcOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecTestResultProcOperationCompleted);
            }
            this.InvokeAsync("ExecTestResultProc", new object[] {
                        BarCode,
                        StationId}, this.ExecTestResultProcOperationCompleted, userState);
        }
        
        private void OnExecTestResultProcOperationCompleted(object arg) {
            if ((this.ExecTestResultProcCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecTestResultProcCompleted(this, new ExecTestResultProcCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMESDataServices/CheckEquLife", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string CheckEquLife([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string EquipmentNo, int times, [System.Xml.Serialization.XmlIgnoreAttribute()] bool timesSpecified, int type, [System.Xml.Serialization.XmlIgnoreAttribute()] bool typeSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string rtValue, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string rtMsg) {
            object[] results = this.Invoke("CheckEquLife", new object[] {
                        EquipmentNo,
                        times,
                        timesSpecified,
                        type,
                        typeSpecified});
            rtValue = ((string)(results[1]));
            rtMsg = ((string)(results[2]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckEquLifeAsync(string EquipmentNo, int times, bool timesSpecified, int type, bool typeSpecified) {
            this.CheckEquLifeAsync(EquipmentNo, times, timesSpecified, type, typeSpecified, null);
        }
        
        /// <remarks/>
        public void CheckEquLifeAsync(string EquipmentNo, int times, bool timesSpecified, int type, bool typeSpecified, object userState) {
            if ((this.CheckEquLifeOperationCompleted == null)) {
                this.CheckEquLifeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckEquLifeOperationCompleted);
            }
            this.InvokeAsync("CheckEquLife", new object[] {
                        EquipmentNo,
                        times,
                        timesSpecified,
                        type,
                        typeSpecified}, this.CheckEquLifeOperationCompleted, userState);
        }
        
        private void OnCheckEquLifeOperationCompleted(object arg) {
            if ((this.CheckEquLifeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckEquLifeCompleted(this, new CheckEquLifeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMESDataServices/GetSystemAddress", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetSystemAddress([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string FactoryId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string ProfitCenter, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string UpdateType, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string rtValue, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string rtMsg) {
            object[] results = this.Invoke("GetSystemAddress", new object[] {
                        FactoryId,
                        ProfitCenter,
                        UpdateType});
            rtValue = ((string)(results[1]));
            rtMsg = ((string)(results[2]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSystemAddressAsync(string FactoryId, string ProfitCenter, string UpdateType) {
            this.GetSystemAddressAsync(FactoryId, ProfitCenter, UpdateType, null);
        }
        
        /// <remarks/>
        public void GetSystemAddressAsync(string FactoryId, string ProfitCenter, string UpdateType, object userState) {
            if ((this.GetSystemAddressOperationCompleted == null)) {
                this.GetSystemAddressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSystemAddressOperationCompleted);
            }
            this.InvokeAsync("GetSystemAddress", new object[] {
                        FactoryId,
                        ProfitCenter,
                        UpdateType}, this.GetSystemAddressOperationCompleted, userState);
        }
        
        private void OnGetSystemAddressOperationCompleted(object arg) {
            if ((this.GetSystemAddressCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSystemAddressCompleted(this, new GetSystemAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMESDataServices/GetSetting", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetSetting([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string FactoryId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string ProfitCenter, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string ParameterType, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string UserName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SettingCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string rtValue, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string rtMsg) {
            object[] results = this.Invoke("GetSetting", new object[] {
                        FactoryId,
                        ProfitCenter,
                        ParameterType,
                        UserName,
                        SettingCode});
            rtValue = ((string)(results[1]));
            rtMsg = ((string)(results[2]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSettingAsync(string FactoryId, string ProfitCenter, string ParameterType, string UserName, string SettingCode) {
            this.GetSettingAsync(FactoryId, ProfitCenter, ParameterType, UserName, SettingCode, null);
        }
        
        /// <remarks/>
        public void GetSettingAsync(string FactoryId, string ProfitCenter, string ParameterType, string UserName, string SettingCode, object userState) {
            if ((this.GetSettingOperationCompleted == null)) {
                this.GetSettingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSettingOperationCompleted);
            }
            this.InvokeAsync("GetSetting", new object[] {
                        FactoryId,
                        ProfitCenter,
                        ParameterType,
                        UserName,
                        SettingCode}, this.GetSettingOperationCompleted, userState);
        }
        
        private void OnGetSettingOperationCompleted(object arg) {
            if ((this.GetSettingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSettingCompleted(this, new GetSettingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMESDataServices/GetSFCFile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Data.DataTable GetSFCFile([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string FactoryId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string ProfitCenter, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SFS01, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string rtValue, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string rtMsg) {
            object[] results = this.Invoke("GetSFCFile", new object[] {
                        FactoryId,
                        ProfitCenter,
                        SFS01});
            rtValue = ((string)(results[1]));
            rtMsg = ((string)(results[2]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetSFCFileAsync(string FactoryId, string ProfitCenter, string SFS01) {
            this.GetSFCFileAsync(FactoryId, ProfitCenter, SFS01, null);
        }
        
        /// <remarks/>
        public void GetSFCFileAsync(string FactoryId, string ProfitCenter, string SFS01, object userState) {
            if ((this.GetSFCFileOperationCompleted == null)) {
                this.GetSFCFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSFCFileOperationCompleted);
            }
            this.InvokeAsync("GetSFCFile", new object[] {
                        FactoryId,
                        ProfitCenter,
                        SFS01}, this.GetSFCFileOperationCompleted, userState);
        }
        
        private void OnGetSFCFileOperationCompleted(object arg) {
            if ((this.GetSFCFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSFCFileCompleted(this, new GetSFCFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMESDataServices/ExecMaterialIssue", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ExecMaterialIssue([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string FactoryId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string ProfitCenter, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string UserName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SFB01, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string ReelBarCode, out float RequirementQuantity, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool RequirementQuantitySpecified, out float TransactionQuantity, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool TransactionQuantitySpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string rtValue, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string rtMsg) {
            object[] results = this.Invoke("ExecMaterialIssue", new object[] {
                        FactoryId,
                        ProfitCenter,
                        UserName,
                        SFB01,
                        ReelBarCode});
            RequirementQuantity = ((float)(results[1]));
            RequirementQuantitySpecified = ((bool)(results[2]));
            TransactionQuantity = ((float)(results[3]));
            TransactionQuantitySpecified = ((bool)(results[4]));
            rtValue = ((string)(results[5]));
            rtMsg = ((string)(results[6]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ExecMaterialIssueAsync(string FactoryId, string ProfitCenter, string UserName, string SFB01, string ReelBarCode) {
            this.ExecMaterialIssueAsync(FactoryId, ProfitCenter, UserName, SFB01, ReelBarCode, null);
        }
        
        /// <remarks/>
        public void ExecMaterialIssueAsync(string FactoryId, string ProfitCenter, string UserName, string SFB01, string ReelBarCode, object userState) {
            if ((this.ExecMaterialIssueOperationCompleted == null)) {
                this.ExecMaterialIssueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecMaterialIssueOperationCompleted);
            }
            this.InvokeAsync("ExecMaterialIssue", new object[] {
                        FactoryId,
                        ProfitCenter,
                        UserName,
                        SFB01,
                        ReelBarCode}, this.ExecMaterialIssueOperationCompleted, userState);
        }
        
        private void OnExecMaterialIssueOperationCompleted(object arg) {
            if ((this.ExecMaterialIssueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecMaterialIssueCompleted(this, new ExecMaterialIssueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMESDataServices/GetSFCStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Data.DataTable GetSFCStatus([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string FactoryId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string ProfitCenter, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SFS01, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string rtValue, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string rtMsg) {
            object[] results = this.Invoke("GetSFCStatus", new object[] {
                        FactoryId,
                        ProfitCenter,
                        SFS01});
            rtValue = ((string)(results[1]));
            rtMsg = ((string)(results[2]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetSFCStatusAsync(string FactoryId, string ProfitCenter, string SFS01) {
            this.GetSFCStatusAsync(FactoryId, ProfitCenter, SFS01, null);
        }
        
        /// <remarks/>
        public void GetSFCStatusAsync(string FactoryId, string ProfitCenter, string SFS01, object userState) {
            if ((this.GetSFCStatusOperationCompleted == null)) {
                this.GetSFCStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSFCStatusOperationCompleted);
            }
            this.InvokeAsync("GetSFCStatus", new object[] {
                        FactoryId,
                        ProfitCenter,
                        SFS01}, this.GetSFCStatusOperationCompleted, userState);
        }
        
        private void OnGetSFCStatusOperationCompleted(object arg) {
            if ((this.GetSFCStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSFCStatusCompleted(this, new GetSFCStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMESDataServices/GetHWOutQty", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetHWOutQty([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string HWPONumber, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string PartID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string outQty, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string rtValue, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string rtMsg) {
            object[] results = this.Invoke("GetHWOutQty", new object[] {
                        HWPONumber,
                        PartID});
            outQty = ((string)(results[1]));
            rtValue = ((string)(results[2]));
            rtMsg = ((string)(results[3]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetHWOutQtyAsync(string HWPONumber, string PartID) {
            this.GetHWOutQtyAsync(HWPONumber, PartID, null);
        }
        
        /// <remarks/>
        public void GetHWOutQtyAsync(string HWPONumber, string PartID, object userState) {
            if ((this.GetHWOutQtyOperationCompleted == null)) {
                this.GetHWOutQtyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHWOutQtyOperationCompleted);
            }
            this.InvokeAsync("GetHWOutQty", new object[] {
                        HWPONumber,
                        PartID}, this.GetHWOutQtyOperationCompleted, userState);
        }
        
        private void OnGetHWOutQtyOperationCompleted(object arg) {
            if ((this.GetHWOutQtyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHWOutQtyCompleted(this, new GetHWOutQtyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMESDataServices/CheckSfcMoPN", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string CheckSfcMoPN([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string strMOID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string strPartId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string strFactoryID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string strProfitCenter, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref string strOutPartId) {
            object[] results = this.Invoke("CheckSfcMoPN", new object[] {
                        strMOID,
                        strPartId,
                        strFactoryID,
                        strProfitCenter,
                        strOutPartId});
            strOutPartId = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckSfcMoPNAsync(string strMOID, string strPartId, string strFactoryID, string strProfitCenter, string strOutPartId) {
            this.CheckSfcMoPNAsync(strMOID, strPartId, strFactoryID, strProfitCenter, strOutPartId, null);
        }
        
        /// <remarks/>
        public void CheckSfcMoPNAsync(string strMOID, string strPartId, string strFactoryID, string strProfitCenter, string strOutPartId, object userState) {
            if ((this.CheckSfcMoPNOperationCompleted == null)) {
                this.CheckSfcMoPNOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckSfcMoPNOperationCompleted);
            }
            this.InvokeAsync("CheckSfcMoPN", new object[] {
                        strMOID,
                        strPartId,
                        strFactoryID,
                        strProfitCenter,
                        strOutPartId}, this.CheckSfcMoPNOperationCompleted, userState);
        }
        
        private void OnCheckSfcMoPNOperationCompleted(object arg) {
            if ((this.CheckSfcMoPNCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckSfcMoPNCompleted(this, new CheckSfcMoPNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMESDataServices/GetSFCNewFSN", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetSFCNewFSN([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string strMOID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string strPSN, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string strStationID, bool blnInstant, [System.Xml.Serialization.XmlIgnoreAttribute()] bool blnInstantSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string strUserID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string strFactoryID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string strProfitCenter, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref string strFSN) {
            object[] results = this.Invoke("GetSFCNewFSN", new object[] {
                        strMOID,
                        strPSN,
                        strStationID,
                        blnInstant,
                        blnInstantSpecified,
                        strUserID,
                        strFactoryID,
                        strProfitCenter,
                        strFSN});
            strFSN = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSFCNewFSNAsync(string strMOID, string strPSN, string strStationID, bool blnInstant, bool blnInstantSpecified, string strUserID, string strFactoryID, string strProfitCenter, string strFSN) {
            this.GetSFCNewFSNAsync(strMOID, strPSN, strStationID, blnInstant, blnInstantSpecified, strUserID, strFactoryID, strProfitCenter, strFSN, null);
        }
        
        /// <remarks/>
        public void GetSFCNewFSNAsync(string strMOID, string strPSN, string strStationID, bool blnInstant, bool blnInstantSpecified, string strUserID, string strFactoryID, string strProfitCenter, string strFSN, object userState) {
            if ((this.GetSFCNewFSNOperationCompleted == null)) {
                this.GetSFCNewFSNOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSFCNewFSNOperationCompleted);
            }
            this.InvokeAsync("GetSFCNewFSN", new object[] {
                        strMOID,
                        strPSN,
                        strStationID,
                        blnInstant,
                        blnInstantSpecified,
                        strUserID,
                        strFactoryID,
                        strProfitCenter,
                        strFSN}, this.GetSFCNewFSNOperationCompleted, userState);
        }
        
        private void OnGetSFCNewFSNOperationCompleted(object arg) {
            if ((this.GetSFCNewFSNCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSFCNewFSNCompleted(this, new GetSFCNewFSNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMESDataServices/PrintSFCFSNLabel", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string PrintSFCFSNLabel([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string strFSN, bool blnTestResult, [System.Xml.Serialization.XmlIgnoreAttribute()] bool blnTestResultSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string blnTestMashine, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string strStationID, bool blnPrint, [System.Xml.Serialization.XmlIgnoreAttribute()] bool blnPrintSpecified, bool blnSaveTestRecord, [System.Xml.Serialization.XmlIgnoreAttribute()] bool blnSaveTestRecordSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string strFactoryID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string strProfitCenter, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref string strPrintPath, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref string strPrintContent) {
            object[] results = this.Invoke("PrintSFCFSNLabel", new object[] {
                        strFSN,
                        blnTestResult,
                        blnTestResultSpecified,
                        blnTestMashine,
                        strStationID,
                        blnPrint,
                        blnPrintSpecified,
                        blnSaveTestRecord,
                        blnSaveTestRecordSpecified,
                        strFactoryID,
                        strProfitCenter,
                        strPrintPath,
                        strPrintContent});
            strPrintPath = ((string)(results[1]));
            strPrintContent = ((string)(results[2]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PrintSFCFSNLabelAsync(string strFSN, bool blnTestResult, bool blnTestResultSpecified, string blnTestMashine, string strStationID, bool blnPrint, bool blnPrintSpecified, bool blnSaveTestRecord, bool blnSaveTestRecordSpecified, string strFactoryID, string strProfitCenter, string strPrintPath, string strPrintContent) {
            this.PrintSFCFSNLabelAsync(strFSN, blnTestResult, blnTestResultSpecified, blnTestMashine, strStationID, blnPrint, blnPrintSpecified, blnSaveTestRecord, blnSaveTestRecordSpecified, strFactoryID, strProfitCenter, strPrintPath, strPrintContent, null);
        }
        
        /// <remarks/>
        public void PrintSFCFSNLabelAsync(string strFSN, bool blnTestResult, bool blnTestResultSpecified, string blnTestMashine, string strStationID, bool blnPrint, bool blnPrintSpecified, bool blnSaveTestRecord, bool blnSaveTestRecordSpecified, string strFactoryID, string strProfitCenter, string strPrintPath, string strPrintContent, object userState) {
            if ((this.PrintSFCFSNLabelOperationCompleted == null)) {
                this.PrintSFCFSNLabelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrintSFCFSNLabelOperationCompleted);
            }
            this.InvokeAsync("PrintSFCFSNLabel", new object[] {
                        strFSN,
                        blnTestResult,
                        blnTestResultSpecified,
                        blnTestMashine,
                        strStationID,
                        blnPrint,
                        blnPrintSpecified,
                        blnSaveTestRecord,
                        blnSaveTestRecordSpecified,
                        strFactoryID,
                        strProfitCenter,
                        strPrintPath,
                        strPrintContent}, this.PrintSFCFSNLabelOperationCompleted, userState);
        }
        
        private void OnPrintSFCFSNLabelOperationCompleted(object arg) {
            if ((this.PrintSFCFSNLabelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PrintSFCFSNLabelCompleted(this, new PrintSFCFSNLabelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMESDataServices/PrintSFCFSNLabelN", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string PrintSFCFSNLabelN([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string strFSN, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string strStationID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string strUserId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string strFactoryID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string strProfitCenter, int iPrintCount, [System.Xml.Serialization.XmlIgnoreAttribute()] bool iPrintCountSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref string strFSNPE, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref string strPrintPath, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref string strPrintContent) {
            object[] results = this.Invoke("PrintSFCFSNLabelN", new object[] {
                        strFSN,
                        strStationID,
                        strUserId,
                        strFactoryID,
                        strProfitCenter,
                        iPrintCount,
                        iPrintCountSpecified,
                        strFSNPE,
                        strPrintPath,
                        strPrintContent});
            strFSNPE = ((string)(results[1]));
            strPrintPath = ((string)(results[2]));
            strPrintContent = ((string)(results[3]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PrintSFCFSNLabelNAsync(string strFSN, string strStationID, string strUserId, string strFactoryID, string strProfitCenter, int iPrintCount, bool iPrintCountSpecified, string strFSNPE, string strPrintPath, string strPrintContent) {
            this.PrintSFCFSNLabelNAsync(strFSN, strStationID, strUserId, strFactoryID, strProfitCenter, iPrintCount, iPrintCountSpecified, strFSNPE, strPrintPath, strPrintContent, null);
        }
        
        /// <remarks/>
        public void PrintSFCFSNLabelNAsync(string strFSN, string strStationID, string strUserId, string strFactoryID, string strProfitCenter, int iPrintCount, bool iPrintCountSpecified, string strFSNPE, string strPrintPath, string strPrintContent, object userState) {
            if ((this.PrintSFCFSNLabelNOperationCompleted == null)) {
                this.PrintSFCFSNLabelNOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrintSFCFSNLabelNOperationCompleted);
            }
            this.InvokeAsync("PrintSFCFSNLabelN", new object[] {
                        strFSN,
                        strStationID,
                        strUserId,
                        strFactoryID,
                        strProfitCenter,
                        iPrintCount,
                        iPrintCountSpecified,
                        strFSNPE,
                        strPrintPath,
                        strPrintContent}, this.PrintSFCFSNLabelNOperationCompleted, userState);
        }
        
        private void OnPrintSFCFSNLabelNOperationCompleted(object arg) {
            if ((this.PrintSFCFSNLabelNCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PrintSFCFSNLabelNCompleted(this, new PrintSFCFSNLabelNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMESDataServices/PrintSFCFSNPocket", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string PrintSFCFSNPocket([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string strFSN, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string strStationID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string strUserId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string strFactoryID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string strProfitCenter, int iPrintCount, [System.Xml.Serialization.XmlIgnoreAttribute()] bool iPrintCountSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref string strFSNPE, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref string strPrintPath, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref string strPrintContent) {
            object[] results = this.Invoke("PrintSFCFSNPocket", new object[] {
                        strFSN,
                        strStationID,
                        strUserId,
                        strFactoryID,
                        strProfitCenter,
                        iPrintCount,
                        iPrintCountSpecified,
                        strFSNPE,
                        strPrintPath,
                        strPrintContent});
            strFSNPE = ((string)(results[1]));
            strPrintPath = ((string)(results[2]));
            strPrintContent = ((string)(results[3]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PrintSFCFSNPocketAsync(string strFSN, string strStationID, string strUserId, string strFactoryID, string strProfitCenter, int iPrintCount, bool iPrintCountSpecified, string strFSNPE, string strPrintPath, string strPrintContent) {
            this.PrintSFCFSNPocketAsync(strFSN, strStationID, strUserId, strFactoryID, strProfitCenter, iPrintCount, iPrintCountSpecified, strFSNPE, strPrintPath, strPrintContent, null);
        }
        
        /// <remarks/>
        public void PrintSFCFSNPocketAsync(string strFSN, string strStationID, string strUserId, string strFactoryID, string strProfitCenter, int iPrintCount, bool iPrintCountSpecified, string strFSNPE, string strPrintPath, string strPrintContent, object userState) {
            if ((this.PrintSFCFSNPocketOperationCompleted == null)) {
                this.PrintSFCFSNPocketOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrintSFCFSNPocketOperationCompleted);
            }
            this.InvokeAsync("PrintSFCFSNPocket", new object[] {
                        strFSN,
                        strStationID,
                        strUserId,
                        strFactoryID,
                        strProfitCenter,
                        iPrintCount,
                        iPrintCountSpecified,
                        strFSNPE,
                        strPrintPath,
                        strPrintContent}, this.PrintSFCFSNPocketOperationCompleted, userState);
        }
        
        private void OnPrintSFCFSNPocketOperationCompleted(object arg) {
            if ((this.PrintSFCFSNPocketCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PrintSFCFSNPocketCompleted(this, new PrintSFCFSNPocketCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMESDataServices/RePrintSFCFSNPocket", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string RePrintSFCFSNPocket([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string strFSN, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string strStationID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string strUserId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string strFactoryID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string strProfitCenter, int iPrintCount, [System.Xml.Serialization.XmlIgnoreAttribute()] bool iPrintCountSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref string strFSNPE, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref string strPrintPath, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref string strPrintContent) {
            object[] results = this.Invoke("RePrintSFCFSNPocket", new object[] {
                        strFSN,
                        strStationID,
                        strUserId,
                        strFactoryID,
                        strProfitCenter,
                        iPrintCount,
                        iPrintCountSpecified,
                        strFSNPE,
                        strPrintPath,
                        strPrintContent});
            strFSNPE = ((string)(results[1]));
            strPrintPath = ((string)(results[2]));
            strPrintContent = ((string)(results[3]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RePrintSFCFSNPocketAsync(string strFSN, string strStationID, string strUserId, string strFactoryID, string strProfitCenter, int iPrintCount, bool iPrintCountSpecified, string strFSNPE, string strPrintPath, string strPrintContent) {
            this.RePrintSFCFSNPocketAsync(strFSN, strStationID, strUserId, strFactoryID, strProfitCenter, iPrintCount, iPrintCountSpecified, strFSNPE, strPrintPath, strPrintContent, null);
        }
        
        /// <remarks/>
        public void RePrintSFCFSNPocketAsync(string strFSN, string strStationID, string strUserId, string strFactoryID, string strProfitCenter, int iPrintCount, bool iPrintCountSpecified, string strFSNPE, string strPrintPath, string strPrintContent, object userState) {
            if ((this.RePrintSFCFSNPocketOperationCompleted == null)) {
                this.RePrintSFCFSNPocketOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRePrintSFCFSNPocketOperationCompleted);
            }
            this.InvokeAsync("RePrintSFCFSNPocket", new object[] {
                        strFSN,
                        strStationID,
                        strUserId,
                        strFactoryID,
                        strProfitCenter,
                        iPrintCount,
                        iPrintCountSpecified,
                        strFSNPE,
                        strPrintPath,
                        strPrintContent}, this.RePrintSFCFSNPocketOperationCompleted, userState);
        }
        
        private void OnRePrintSFCFSNPocketOperationCompleted(object arg) {
            if ((this.RePrintSFCFSNPocketCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RePrintSFCFSNPocketCompleted(this, new RePrintSFCFSNPocketCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMESDataServices/CheckUserAuthority", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string CheckUserAuthority([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string strUserId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string strPwd) {
            object[] results = this.Invoke("CheckUserAuthority", new object[] {
                        strUserId,
                        strPwd});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckUserAuthorityAsync(string strUserId, string strPwd) {
            this.CheckUserAuthorityAsync(strUserId, strPwd, null);
        }
        
        /// <remarks/>
        public void CheckUserAuthorityAsync(string strUserId, string strPwd, object userState) {
            if ((this.CheckUserAuthorityOperationCompleted == null)) {
                this.CheckUserAuthorityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckUserAuthorityOperationCompleted);
            }
            this.InvokeAsync("CheckUserAuthority", new object[] {
                        strUserId,
                        strPwd}, this.CheckUserAuthorityOperationCompleted, userState);
        }
        
        private void OnCheckUserAuthorityOperationCompleted(object arg) {
            if ((this.CheckUserAuthorityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckUserAuthorityCompleted(this, new CheckUserAuthorityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMESDataServices/GetSFCFChildTPart", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetSFCFChildTPart([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string strParentPartId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref string strResult) {
            object[] results = this.Invoke("GetSFCFChildTPart", new object[] {
                        strParentPartId,
                        strResult});
            strResult = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSFCFChildTPartAsync(string strParentPartId, string strResult) {
            this.GetSFCFChildTPartAsync(strParentPartId, strResult, null);
        }
        
        /// <remarks/>
        public void GetSFCFChildTPartAsync(string strParentPartId, string strResult, object userState) {
            if ((this.GetSFCFChildTPartOperationCompleted == null)) {
                this.GetSFCFChildTPartOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSFCFChildTPartOperationCompleted);
            }
            this.InvokeAsync("GetSFCFChildTPart", new object[] {
                        strParentPartId,
                        strResult}, this.GetSFCFChildTPartOperationCompleted, userState);
        }
        
        private void OnGetSFCFChildTPartOperationCompleted(object arg) {
            if ((this.GetSFCFChildTPartCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSFCFChildTPartCompleted(this, new GetSFCFChildTPartCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMESDataServices/GetSFCFChildMoid", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetSFCFChildMoid([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string strParentMoid, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref string strResult) {
            object[] results = this.Invoke("GetSFCFChildMoid", new object[] {
                        strParentMoid,
                        strResult});
            strResult = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSFCFChildMoidAsync(string strParentMoid, string strResult) {
            this.GetSFCFChildMoidAsync(strParentMoid, strResult, null);
        }
        
        /// <remarks/>
        public void GetSFCFChildMoidAsync(string strParentMoid, string strResult, object userState) {
            if ((this.GetSFCFChildMoidOperationCompleted == null)) {
                this.GetSFCFChildMoidOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSFCFChildMoidOperationCompleted);
            }
            this.InvokeAsync("GetSFCFChildMoid", new object[] {
                        strParentMoid,
                        strResult}, this.GetSFCFChildMoidOperationCompleted, userState);
        }
        
        private void OnGetSFCFChildMoidOperationCompleted(object arg) {
            if ((this.GetSFCFChildMoidCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSFCFChildMoidCompleted(this, new GetSFCFChildMoidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMESDataServices/CheckMoUNTreatedNG", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CheckMoUNTreatedNG([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string strMOID, out bool CheckMoUNTreatedNGResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool CheckMoUNTreatedNGResultSpecified) {
            object[] results = this.Invoke("CheckMoUNTreatedNG", new object[] {
                        strMOID});
            CheckMoUNTreatedNGResult = ((bool)(results[0]));
            CheckMoUNTreatedNGResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void CheckMoUNTreatedNGAsync(string strMOID) {
            this.CheckMoUNTreatedNGAsync(strMOID, null);
        }
        
        /// <remarks/>
        public void CheckMoUNTreatedNGAsync(string strMOID, object userState) {
            if ((this.CheckMoUNTreatedNGOperationCompleted == null)) {
                this.CheckMoUNTreatedNGOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckMoUNTreatedNGOperationCompleted);
            }
            this.InvokeAsync("CheckMoUNTreatedNG", new object[] {
                        strMOID}, this.CheckMoUNTreatedNGOperationCompleted, userState);
        }
        
        private void OnCheckMoUNTreatedNGOperationCompleted(object arg) {
            if ((this.CheckMoUNTreatedNGCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckMoUNTreatedNGCompleted(this, new CheckMoUNTreatedNGCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMESDataServices/ServiceInterface", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public object ServiceInterface([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string ServiceName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string ServiceParamList) {
            object[] results = this.Invoke("ServiceInterface", new object[] {
                        ServiceName,
                        ServiceParamList});
            return ((object)(results[0]));
        }
        
        /// <remarks/>
        public void ServiceInterfaceAsync(string ServiceName, string ServiceParamList) {
            this.ServiceInterfaceAsync(ServiceName, ServiceParamList, null);
        }
        
        /// <remarks/>
        public void ServiceInterfaceAsync(string ServiceName, string ServiceParamList, object userState) {
            if ((this.ServiceInterfaceOperationCompleted == null)) {
                this.ServiceInterfaceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnServiceInterfaceOperationCompleted);
            }
            this.InvokeAsync("ServiceInterface", new object[] {
                        ServiceName,
                        ServiceParamList}, this.ServiceInterfaceOperationCompleted, userState);
        }
        
        private void OnServiceInterfaceOperationCompleted(object arg) {
            if ((this.ServiceInterfaceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ServiceInterfaceCompleted(this, new ServiceInterfaceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/DAL")]
    public partial class SqlParam {
        
        private DbType _dateTypeField;
        
        private string _fieldNameField;
        
        private object _fieldValueField;
        
        /// <remarks/>
        public DbType _dateType {
            get {
                return this._dateTypeField;
            }
            set {
                this._dateTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string _fieldName {
            get {
                return this._fieldNameField;
            }
            set {
                this._fieldNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public object _fieldValue {
            get {
                return this._fieldValueField;
            }
            set {
                this._fieldValueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/System.Data")]
    public enum DbType {
        
        /// <remarks/>
        AnsiString,
        
        /// <remarks/>
        Binary,
        
        /// <remarks/>
        Byte,
        
        /// <remarks/>
        Boolean,
        
        /// <remarks/>
        Currency,
        
        /// <remarks/>
        Date,
        
        /// <remarks/>
        DateTime,
        
        /// <remarks/>
        Decimal,
        
        /// <remarks/>
        Double,
        
        /// <remarks/>
        Guid,
        
        /// <remarks/>
        Int16,
        
        /// <remarks/>
        Int32,
        
        /// <remarks/>
        Int64,
        
        /// <remarks/>
        Object,
        
        /// <remarks/>
        SByte,
        
        /// <remarks/>
        Single,
        
        /// <remarks/>
        String,
        
        /// <remarks/>
        Time,
        
        /// <remarks/>
        UInt16,
        
        /// <remarks/>
        UInt32,
        
        /// <remarks/>
        UInt64,
        
        /// <remarks/>
        VarNumeric,
        
        /// <remarks/>
        AnsiStringFixedLength,
        
        /// <remarks/>
        StringFixedLength,
        
        /// <remarks/>
        Xml,
        
        /// <remarks/>
        DateTime2,
        
        /// <remarks/>
        DateTimeOffset,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void GetDataFromSFCCompletedEventHandler(object sender, GetDataFromSFCCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDataFromSFCCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataFromSFCCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void InsertDataToSFCCompletedEventHandler(object sender, InsertDataToSFCCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertDataToSFCCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertDataToSFCCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool InsertDataToSFCResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool InsertDataToSFCResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void GetTiptopBOMInfoCompletedEventHandler(object sender, GetTiptopBOMInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTiptopBOMInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTiptopBOMInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string rtValue {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string rtMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void GetCheckEquipmentCompletedEventHandler(object sender, GetCheckEquipmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCheckEquipmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCheckEquipmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool GetCheckEquipmentResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool GetCheckEquipmentResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int Quantity {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public bool QuantitySpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public int ValidQuantity {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public bool ValidQuantitySpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string rtValue {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public string rtMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[7]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void ExecEquipmentUpdateCompletedEventHandler(object sender, ExecEquipmentUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecEquipmentUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecEquipmentUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool ExecEquipmentUpdateResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool ExecEquipmentUpdateResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int Quantity {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public bool QuantitySpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public int ValidQuantity {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public bool ValidQuantitySpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string rtValue {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public string rtMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[7]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void ExecEquipmentOAUpdateCompletedEventHandler(object sender, ExecEquipmentOAUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecEquipmentOAUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecEquipmentOAUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool ExecEquipmentOAUpdateResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool ExecEquipmentOAUpdateResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string rtValue {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string rtMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void GetEncrytStringCompletedEventHandler(object sender, GetEncrytStringCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEncrytStringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEncrytStringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void InsertCADVersionCompletedEventHandler(object sender, InsertCADVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertCADVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertCADVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool InsertCADVersionResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool InsertCADVersionResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string rtValue {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string rtMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void GetPLMECNCompletedEventHandler(object sender, GetPLMECNCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPLMECNCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPLMECNCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string rtValue {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string rtMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void GetECNBomCompletedEventHandler(object sender, GetECNBomCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetECNBomCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetECNBomCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string rtValue {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string rtMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void ExecECNBomUpdateCompletedEventHandler(object sender, ExecECNBomUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecECNBomUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecECNBomUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool ExecECNBomUpdateResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool ExecECNBomUpdateResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string rtValue {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string rtMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void ExecMOProduceItemCompletedEventHandler(object sender, ExecMOProduceItemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecMOProduceItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecMOProduceItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool ExecMOProduceItemResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool ExecMOProduceItemResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string outScanQuantity {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string rtValue {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string rtMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void ExecEBUMOProduceItemCompletedEventHandler(object sender, ExecEBUMOProduceItemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecEBUMOProduceItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecEBUMOProduceItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool ExecEBUMOProduceItemResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool ExecEBUMOProduceItemResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string outScanQuantity {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string rtValue {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string rtMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void SetMoidAlterCompletedEventHandler(object sender, SetMoidAlterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetMoidAlterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetMoidAlterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string rtValue {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string rtMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void GetCheckAssysDataCompletedEventHandler(object sender, GetCheckAssysDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCheckAssysDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCheckAssysDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool GetCheckAssysDataResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool GetCheckAssysDataResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string rtValue {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string rtMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void ExecTestResultProcCompletedEventHandler(object sender, ExecTestResultProcCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecTestResultProcCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecTestResultProcCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool ExecTestResultProcResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool ExecTestResultProcResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void CheckEquLifeCompletedEventHandler(object sender, CheckEquLifeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckEquLifeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckEquLifeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string rtValue {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string rtMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void GetSystemAddressCompletedEventHandler(object sender, GetSystemAddressCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSystemAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSystemAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string rtValue {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string rtMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void GetSettingCompletedEventHandler(object sender, GetSettingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSettingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSettingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string rtValue {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string rtMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void GetSFCFileCompletedEventHandler(object sender, GetSFCFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSFCFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSFCFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string rtValue {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string rtMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void ExecMaterialIssueCompletedEventHandler(object sender, ExecMaterialIssueCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecMaterialIssueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecMaterialIssueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public float RequirementQuantity {
            get {
                this.RaiseExceptionIfNecessary();
                return ((float)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public bool RequirementQuantitySpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public float TransactionQuantity {
            get {
                this.RaiseExceptionIfNecessary();
                return ((float)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public bool TransactionQuantitySpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string rtValue {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string rtMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void GetSFCStatusCompletedEventHandler(object sender, GetSFCStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSFCStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSFCStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string rtValue {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string rtMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void GetHWOutQtyCompletedEventHandler(object sender, GetHWOutQtyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHWOutQtyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHWOutQtyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string outQty {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string rtValue {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string rtMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void CheckSfcMoPNCompletedEventHandler(object sender, CheckSfcMoPNCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckSfcMoPNCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckSfcMoPNCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strOutPartId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void GetSFCNewFSNCompletedEventHandler(object sender, GetSFCNewFSNCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSFCNewFSNCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSFCNewFSNCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strFSN {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void PrintSFCFSNLabelCompletedEventHandler(object sender, PrintSFCFSNLabelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PrintSFCFSNLabelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PrintSFCFSNLabelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strPrintPath {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string strPrintContent {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void PrintSFCFSNLabelNCompletedEventHandler(object sender, PrintSFCFSNLabelNCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PrintSFCFSNLabelNCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PrintSFCFSNLabelNCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strFSNPE {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string strPrintPath {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string strPrintContent {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void PrintSFCFSNPocketCompletedEventHandler(object sender, PrintSFCFSNPocketCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PrintSFCFSNPocketCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PrintSFCFSNPocketCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strFSNPE {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string strPrintPath {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string strPrintContent {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void RePrintSFCFSNPocketCompletedEventHandler(object sender, RePrintSFCFSNPocketCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RePrintSFCFSNPocketCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RePrintSFCFSNPocketCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strFSNPE {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string strPrintPath {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string strPrintContent {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void CheckUserAuthorityCompletedEventHandler(object sender, CheckUserAuthorityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckUserAuthorityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckUserAuthorityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void GetSFCFChildTPartCompletedEventHandler(object sender, GetSFCFChildTPartCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSFCFChildTPartCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSFCFChildTPartCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void GetSFCFChildMoidCompletedEventHandler(object sender, GetSFCFChildMoidCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSFCFChildMoidCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSFCFChildMoidCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void CheckMoUNTreatedNGCompletedEventHandler(object sender, CheckMoUNTreatedNGCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckMoUNTreatedNGCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckMoUNTreatedNGCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool CheckMoUNTreatedNGResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool CheckMoUNTreatedNGResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void ServiceInterfaceCompletedEventHandler(object sender, ServiceInterfaceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ServiceInterfaceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ServiceInterfaceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591